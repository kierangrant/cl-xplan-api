Types
=====

The Types supported include the JSON primitive types plus the following XPLAN specific types.

XPLAN Types are passed around as a JSON object with the following fields:
_type A String indicating the XPLAN Type
_val  The Value represented in some JSON or XPLAN type

Binary
------

A blob of binary data. This is used to contain data in formats that cannot be encoded raw into JSON, such as multimedia attachments.
_type: "Binary"
_val:  A base64 encoded string value
Examples:
{"_type": "Binary", "_val": "VGVzdCBWYWx1ZQ=="}
Value: "Test Value"

Date
----

This includes dates with and without a time component. Dates may contain timezone information depending on the resource.
_type:	      "Date"
_val:	      ISO8601 date
Example:
{"_type": "Date", "_val": "2018-03-01"}
Value:
1st of March 2018. No Time
{"_type": "Date", "_val": "2018-03-01T10:00:00Z"}
Value:
1st of March 2018, 10:00:00AM GMT

Time
----

A time of day, with no attached date.
_type: "Time"
_val:  ISO8601 time
Example:
{"_type": "Time", "_val": "10:15Z"}
Value: 10:15 AM GMT

Decimal
-------

A numeric decimal value. This type is used where precision is essential. Client apps should consider using a decimal library to manipulate these values to avoid loss of precision.

Please Note: This is not just an arbitrary precision numbers, but may also include scientific notation.
_type: "BigDecimal"
_val:  String of the value

Example Strings
"12345678901234567890"	Simple arbitrary precision value, can be prefixed with either "+" or "-" sign and can be post-fixed with an arbitrary length decimal value
"1.23456e2"		Scientific Notation form. Can be prefixed with either "+" or "-" sign

Example:
{"_type": "BigDecimal", "_val": "89875517873681764"}
Value: Speed of Light Squared! (89875517873681764)

Currency
--------

A currency amount, with a specific country code and decimal value.
_type:	   "Currency"
_val:	   JSON Object
	   code:	ISO4217 currency code string
	   value:	XPLAN Decimal Value

Example:
{"_type": "Currency", "_val": {"code": "AUD", "value": {"_type": "BigDecimal", "_val": "100"}}}
Value: AUD$100

Flattening
==========

Form encoded data using "application/x-www-form-urlencoded" for GET and POST requests contain a flat dictionary of key/value pairs. To support nested data, you need to flatten the data.

To do that you construct an effective key name be using the parent key names separated by a ".".
If the structure is an array, you index starting at 0.

Example
{ "foo": ["a", "b", "c"],
  "bar": { "xplan": "api"}
}

Will become: foo.0=a&foo.1=b&foo.2=c&bar.xplan=api

You do not need to flatten if you are passing in a body as application/json.
Note: GET requests do not read body content, so you must flatten in this case.

References
=========

https://insights.iressconnect.com/docs/DOC-7376 - Getting Started with XPLAN API
https://www.json.org/ - JSON
http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf - The JSON Data Interchange Syntax
